
input:
  http_server:
    timeout: 60s
    path: "/megw/apis/stream/{service}/{version}/{action}"
    allowed_verbs:
      - POST
      - GET


pipeline:
  processors:


    # Filter Input
    - label: "FilterInputMainflow"
      hp_transform:
        name: "Filter Input"
        result_mode: new
        mapping: |-
          meta mainFlowId = "33cb48c797b83f67"
          meta flowId = "33cb48c797b83f67"
          meta subflowId = "none"
          meta testId = if meta("X-Trace").or("false") == "true" { if this._hyper_testId != null { this._hyper_testId } else if this.testId != null { this.testId } } else { deleted() }
          meta username = if meta("X-Trace").or("false") == "true" && this._hyper_username != null { this._hyper_username } else { meta("X-Username").or(deleted()) }

          root = this
          
      

    # Node start
    - label: "{package}_a673acae0ecdbdd4"
      hp_resource:
        id: "{package}_a673acae0ecdbdd4"
        goto_route:
          success: "this.{package}_199cc5c3d9e85d93"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "33cb48c797b83f67",
            "nodeId":"a673acae0ecdbdd4",
            "nodeType":"start"
          }
    

    # Node define
    - label: "{package}_199cc5c3d9e85d93"
      hp_resource:
        id: "{package}_199cc5c3d9e85d93"
        goto_route:
          success: "this.{package}_d62ffa593cc59dda"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "33cb48c797b83f67",
            "nodeId":"199cc5c3d9e85d93",
            "nodeType":"define"
          }
    

    # Node code
    - label: "{package}_d62ffa593cc59dda"
      hp_resource:
        id: "{package}_d62ffa593cc59dda"
        goto_route:
          success: "this.{package}_4157283405a7a98d"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "33cb48c797b83f67",
            "nodeId":"d62ffa593cc59dda",
            "nodeType":"code"
          }
    

    # Node code
    - label: "{package}_4157283405a7a98d"
      hp_resource:
        id: "{package}_4157283405a7a98d"
        goto_route:
          success: "this.{package}_cc5d11b44a2b24f0"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "33cb48c797b83f67",
            "nodeId":"4157283405a7a98d",
            "nodeType":"code"
          }
    

    # Node end
    - label: "{package}_cc5d11b44a2b24f0"
      hp_resource:
        id: "{package}_cc5d11b44a2b24f0"
        goto_route:
          success: "this.{package}_endnode"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "33cb48c797b83f67",
            "nodeId":"cc5d11b44a2b24f0",
            "nodeType":"end"
          }
    
    # Exception resources
    - catch:
      - hp_transform:
          name: "Prepare Exception"
          input: |-
            root = this
          mapping: |-
            meta result_status = {"description": error().or(metadata("error_message").or("Exception")), "code": metadata("error_code").or("500") }
            meta result_error = true
          result_mode: merge
          output: |-
            root = this
      - dump_log:
          payload: false


    # End flow (Standard-Format)
    - label: "{package}_endnode"
      dump_log:

output:
  switch:
    cases:
      - check: meta("input_channel") == "http"
        output:
          sync_response: {}
      - check: meta("input_channel") == "socket_sync"
        output:
          sync_response: {}
      - output:
          drop: {}

