
input:
  http_server:
    timeout: 60s
    path: "/megw/apis/stream/{service}/{version}/{action}"
    allowed_verbs:
      - POST
      - GET


pipeline:
  processors:


    # Filter Input
    - label: "FilterInputMainflow"
      hp_transform:
        name: "Filter Input"
        result_mode: new
        mapping: |-
          meta mainFlowId = "472a8ae2136c0969"
          meta flowId = "472a8ae2136c0969"
          meta subflowId = "none"
          meta testId = if meta("X-Trace").or("false") == "true" { if this._hyper_testId != null { this._hyper_testId } else if this.testId != null { this.testId } } else { deleted() }
          meta username = if meta("X-Trace").or("false") == "true" && this._hyper_username != null { this._hyper_username } else { meta("X-Username").or(deleted()) }

          root = this
          
      

    # Node start
    - label: "{package}_6cada974011071eb"
      hp_resource:
        id: "{package}_6cada974011071eb"
        goto_route:
          success: "this.{package}_a071973b8ca6c241"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"6cada974011071eb",
            "nodeType":"start"
          }
    

    # Node define
    - label: "{package}_a071973b8ca6c241"
      hp_resource:
        id: "{package}_a071973b8ca6c241"
        goto_route:
          success: "this.{package}_edefccc8f6b9956c"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"a071973b8ca6c241",
            "nodeType":"define"
          }
    

    # Node code
    - label: "{package}_edefccc8f6b9956c"
      hp_resource:
        id: "{package}_edefccc8f6b9956c"
        goto_route:
          success: "this.{package}_c5308b91c7640be0"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"edefccc8f6b9956c",
            "nodeType":"code"
          }
    

    # Node decision
    - label: "{package}_c5308b91c7640be0"
      hp_resource:
        id: "{package}_c5308b91c7640be0"
        goto_route:
          success: '${! metadata("result_route") }'
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"c5308b91c7640be0",
            "nodeType":"decision"
          }
    

    # Node code
    - label: "{package}_f654232a5368c111"
      hp_resource:
        id: "{package}_f654232a5368c111"
        goto_route:
          success: "this.{package}_6ca557cf8f259ebb"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"f654232a5368c111",
            "nodeType":"code"
          }
    

    # Node ssqsubflow
    - label: "{package}_6ca557cf8f259ebb"
      hp_resource:
        id: "{package}_6ca557cf8f259ebb"
        goto_route:
          success: "this.{package}_0f30d196450e6eaf"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"6ca557cf8f259ebb",
            "nodeType":"ssqsubflow"
          }
    

    # Node end
    - label: "{package}_0f30d196450e6eaf"
      hp_resource:
        id: "{package}_0f30d196450e6eaf"
        goto_route:
          success: "this.{package}_endnode"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"0f30d196450e6eaf",
            "nodeType":"end"
          }
    

    # Node ssqsubflow
    - label: "{package}_c132179c33d04f2c"
      hp_resource:
        id: "{package}_c132179c33d04f2c"
        goto_route:
          success: "this.{package}_b53e3eca1b307599"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"c132179c33d04f2c",
            "nodeType":"ssqsubflow"
          }
    

    # Node decision
    - label: "{package}_b53e3eca1b307599"
      hp_resource:
        id: "{package}_b53e3eca1b307599"
        goto_route:
          success: '${! metadata("result_route") }'
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"b53e3eca1b307599",
            "nodeType":"decision"
          }
    

    # Node decision
    - label: "{package}_b0fe65c32ca3c95d"
      hp_resource:
        id: "{package}_b0fe65c32ca3c95d"
        goto_route:
          success: '${! metadata("result_route") }'
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"b0fe65c32ca3c95d",
            "nodeType":"decision"
          }
    

    # Node end
    - label: "{package}_c3b28f04faf54e63"
      hp_resource:
        id: "{package}_c3b28f04faf54e63"
        goto_route:
          success: "this.{package}_endnode"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"c3b28f04faf54e63",
            "nodeType":"end"
          }
    

    # Node ssqsubflow
    - label: "{package}_4c8e6fad71eb0eef"
      hp_resource:
        id: "{package}_4c8e6fad71eb0eef"
        goto_route:
          success: "this.{package}_c3b28f04faf54e63"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"4c8e6fad71eb0eef",
            "nodeType":"ssqsubflow"
          }
    

    # Node code
    - label: "{package}_734f2395d572e441"
      hp_resource:
        id: "{package}_734f2395d572e441"
        goto_route:
          success: "this.{package}_4c8e6fad71eb0eef"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"734f2395d572e441",
            "nodeType":"code"
          }
    

    # Node ssqsubflow
    - label: "{package}_c9c69748a5e79b7f"
      hp_resource:
        id: "{package}_c9c69748a5e79b7f"
        goto_route:
          success: "this.{package}_85eedeeea2eefcd0"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"c9c69748a5e79b7f",
            "nodeType":"ssqsubflow"
          }
    

    # Node code
    - label: "{package}_1a79516ec53a5077"
      hp_resource:
        id: "{package}_1a79516ec53a5077"
        goto_route:
          success: "this.{package}_4c8e6fad71eb0eef"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"1a79516ec53a5077",
            "nodeType":"code"
          }
    

    # Node code
    - label: "{package}_85eedeeea2eefcd0"
      hp_resource:
        id: "{package}_85eedeeea2eefcd0"
        goto_route:
          success: "this.{package}_c7b2761a19b5cb10"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"85eedeeea2eefcd0",
            "nodeType":"code"
          }
    

    # Node ssqsubflow
    - label: "{package}_c7b2761a19b5cb10"
      hp_resource:
        id: "{package}_c7b2761a19b5cb10"
        goto_route:
          success: "this.{package}_c9de85d187f93d24"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"c7b2761a19b5cb10",
            "nodeType":"ssqsubflow"
          }
    

    # Node decision
    - label: "{package}_c9de85d187f93d24"
      hp_resource:
        id: "{package}_c9de85d187f93d24"
        goto_route:
          success: '${! metadata("result_route") }'
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "472a8ae2136c0969",
            "nodeId":"c9de85d187f93d24",
            "nodeType":"decision"
          }
    
    # Exception resources
    - catch:
      - hp_transform:
          name: "Prepare Exception"
          input: |-
            root = this
          mapping: |-
            meta result_status = {"description": error().or(metadata("error_message").or("Exception")), "code": metadata("error_code").or("500") }
            meta result_error = true
          result_mode: merge
          output: |-
            root = this
      - dump_log:
          payload: false


    # End flow (Standard-Format)
    - label: "{package}_endnode"
      hp_transform:
        name: "Pepare Result"
        mapping: |-
          let result_status = meta("result_status")
          let code = $result_status.code.or("200")
          let description = $result_status.description.or("Success")
          root = this
          root._hyper_code = $code
          root._hyper_message = $description


        result_mode: new

output:
  switch:
    cases:
      - check: meta("input_channel") == "http"
        output:
          sync_response: {}
      - check: meta("input_channel") == "socket_sync"
        output:
          sync_response: {}
      - output:
          drop: {}

