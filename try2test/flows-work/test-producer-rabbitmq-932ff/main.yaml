
input:
  http_server:
    timeout: 60s
    path: "/megw/apis/stream/{service}/{version}/{action}"
    allowed_verbs:
      - POST
      - GET


pipeline:
  processors:


    # Filter Input
    - label: "FilterInputMainflow"
      hp_transform:
        name: "Filter Input"
        result_mode: new
        mapping: |-
          meta mainFlowId = "15e71a21446932ff"
          meta flowId = "15e71a21446932ff"
          meta subflowId = "none"
          meta testId = if meta("X-Trace").or("false") == "true" { if this._hyper_testId != null { this._hyper_testId } else if this.testId != null { this.testId } } else { deleted() }
          meta username = if meta("X-Trace").or("false") == "true" && this._hyper_username != null { this._hyper_username } else { meta("X-Username").or(deleted()) }

          root = this
          
      

    # Node start
    - label: "{package}_6516d5444c70d4cf"
      hp_resource:
        id: "{package}_6516d5444c70d4cf"
        goto_route:
          success: "this.{package}_7c469692e2b02759"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "15e71a21446932ff",
            "nodeId":"6516d5444c70d4cf",
            "nodeType":"start"
          }
    

    # Node define
    - label: "{package}_7c469692e2b02759"
      hp_resource:
        id: "{package}_7c469692e2b02759"
        goto_route:
          success: "this.{package}_0684d7ba16ea13a2"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "15e71a21446932ff",
            "nodeId":"7c469692e2b02759",
            "nodeType":"define"
          }
    

    # Node end
    - label: "{package}_6ebbc8e735ec61c1"
      hp_resource:
        id: "{package}_6ebbc8e735ec61c1"
        goto_route:
          success: "this.{package}_endnode"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "15e71a21446932ff",
            "nodeId":"6ebbc8e735ec61c1",
            "nodeType":"end"
          }
    

    # Node ssqsubflow
    - label: "{package}_0684d7ba16ea13a2"
      hp_resource:
        id: "{package}_0684d7ba16ea13a2"
        goto_route:
          success: "this.{package}_870964674ee44287"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "15e71a21446932ff",
            "nodeId":"0684d7ba16ea13a2",
            "nodeType":"ssqsubflow"
          }
    

    # Node transform
    - label: "{package}_870964674ee44287"
      hp_resource:
        id: "{package}_870964674ee44287"
        goto_route:
          success: "this.{package}_344cb20fa1df4724"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "15e71a21446932ff",
            "nodeId":"870964674ee44287",
            "nodeType":"transform"
          }
    

    # Node code
    - label: "{package}_344cb20fa1df4724"
      hp_resource:
        id: "{package}_344cb20fa1df4724"
        goto_route:
          success: "this.{package}_6ebbc8e735ec61c1"
          #failure: "this.{package}_exception"
          
        metadata: |-
          {
            "scopeType": "mainFlow",
            "scopeId": "15e71a21446932ff",
            "nodeId":"344cb20fa1df4724",
            "nodeType":"code"
          }
    
    # Exception resources
    - catch:
      - hp_transform:
          name: "Prepare Exception"
          input: |-
            root = this
          mapping: |-
            meta result_status = {"description": error().or(metadata("error_message").or("Exception")), "code": metadata("error_code").or("500") }
            meta result_error = true
          result_mode: merge
          output: |-
            root = this
      - dump_log:
          payload: false


    # End flow (Standard-Format)
    - label: "{package}_endnode"
      hp_transform:
        name: "Pepare Result"
        mapping: |-
          let result_status = meta("result_status")
          let code = $result_status.code.or("200")
          let description = $result_status.description.or("Success")
          root = this
          root._hyper_code = $code
          root._hyper_message = $description

          let temp = meta_delete("result_status")

        result_mode: new

# Parallel output
output:
  label: ""
  broker:
    pattern: fan_out
    outputs: 
      - label: "Producer_Topic"
        amqp_0_9:
          urls:
            - amqp://guest:guest@host.docker.internal:5672/
          exchange: "test.topic"
          exchange_declare:
            enabled: true # ให้สร้าง exchange
            type: topic # type เป็น topic
            durable: true
          key: "thai.hello"
          type: "topic"
          metadata:
            exclude_prefixes: ["A", "B", "C", "D","E", "*"]
          max_in_flight: 1
      - switch:
          cases:
            - check: meta("input_channel") == "http"
              output:
                sync_response: {}
            - check: meta("input_channel") == "socket_sync"
              output:
                sync_response: {}
            - output:
                drop: {}

