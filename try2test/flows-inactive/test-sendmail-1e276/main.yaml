http:
  enabled: true
input:
  broker:
    inputs:
      - generate:
          mapping: |
            root = {"body":"test send schedule","to":["adirak@gmail.com"]}
          interval: TZ=Asia/Bangkok 55 10 * * *
          count: 0
          batch_size: 1
          auto_replay_nacks: false
      - generate:
          mapping: |
            root = {"body":"test send schedule","to":["adirak@gmail.com"]}
          interval: TZ=Asia/Bangkok 00 11 * * *
          count: 0
          batch_size: 1
          auto_replay_nacks: false
      - generate:
          mapping: |
            root = {"body":"test send schedule","to":["adirak@gmail.com"]}
          interval: TZ=Asia/Bangkok 30 11 * * *
          count: 0
          batch_size: 1
          auto_replay_nacks: false
      - generate:
          mapping: |
            root = {"body":"test send schedule","to":["adirak@gmail.com"]}
          interval: TZ=Asia/Bangkok 00 12 * * *
          count: 0
          batch_size: 1
          auto_replay_nacks: false

      - http_server:
          timeout: 60s
          path: "/megw/apis/stream/{service}/{version}/{action}"
          allowed_verbs:
            - POST
            - GET
          sync_response:
            headers: { "Content-Type": '${! meta("content_type") }', "FlowId": "4524f6582f81e276" }
            status: '${! json("_hyper_code") }'

pipeline:
  model: 1
  processors:
    - mapping: |
        meta mainFlowId = "4524f6582f81e276"
        meta flowId = "4524f6582f81e276"
        meta subflowId = "none"
        meta testId = if meta("X-Trace").or("false") == "true" { if this._hyper_testId != null { this._hyper_testId } else if this.testId != null { this.testId } } else { deleted() }
        meta username = if meta("X-Trace").or("false") == "true" && this._hyper_username != null { this._hyper_username } else { meta("X-Username") }
        
        meta xB3TraceId = if meta("X-B3-TraceId") != null { meta("X-B3-TraceId") } else { deleted() }
        meta xB3SpanId = if meta("X-B3-SpanId") != null { meta("X-B3-SpanId") } else { deleted() }
        meta xUsername = if meta("X-Username") != null { meta("X-Username") } else { deleted() }
        meta xSession = if meta("X-Session") != null { meta("X-Session") } else { "no_session" }
        let header_data = {"User-Agent": meta("User-Agent")}
        meta header_data = $header_data

    
    # Mainflow 
    # Node start
    - resource: "4524f6582f81e276_7b95e1090d2520f4"
    # Node end
    - resource: "4524f6582f81e276_096323a704d7fc33"
    # Node define
    - resource: "4524f6582f81e276_344ff1dfc091f404"
    # Node sendmail
    - resource: "4524f6582f81e276_060e33dec5db9de1"
    # Exception resources
    - resource: "exception"
    # End flow resource
    - resource: "endnode"
    - switch:
      - check: meta("result_error") == true
        processors:
        - log:
            level: ERROR
            message: '${! meta("result_status") }'
        - log:
            level: INFO
            message: 'Data -> ${! content() }'
    - resource: "prepare_result_other"

output:
  switch:
    cases:
      - check: meta("input_channel") == "http"
        output:
          sync_response: {}
      - check: meta("input_channel") == "socket_sync"
        output:
          sync_response: {}
      - output:
          drop: {}